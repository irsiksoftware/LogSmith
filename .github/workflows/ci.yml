name: CI Matrix - Unity Tests

on:
  push:
    branches: [ main, feature/gh-3-ci-matrix-unity-versions ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test ${{ matrix.unityVersion }} on Windows
    runs-on: [self-hosted, Windows]

    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2022.3.50f1  # 2022.3 LTS
          - 2023.2.20f1  # 2023 LTS
          - 6000.0.26f1  # 6000.2 LTS (Unity 6)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Unity License
        shell: powershell
        run: |
          $LICENSE_DIR = "$env:LOCALAPPDATA\Unity\licenses"
          New-Item -ItemType Directory -Force -Path $LICENSE_DIR | Out-Null

          $LICENSE_FILE = "$LICENSE_DIR\UnityEntitlementLicense.xml"
          [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("${{ secrets.UNITY_LICENSE }}")) | Out-File -FilePath $LICENSE_FILE -Encoding UTF8 -NoNewline

          Write-Host "Unity license installed at: $LICENSE_FILE"

      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.unityVersion }}-${{ hashFiles('Packages/packages-lock.json', 'Packages/manifest.json', 'ProjectSettings/ProjectVersion.txt') }}
          restore-keys: |
            Library-${{ matrix.unityVersion }}-
            Library-

      - name: Find Unity Editor Path
        id: unity-path
        shell: powershell
        run: |
          $UNITY_PATH = "C:/Program Files/Unity/Hub/Editor/${{ matrix.unityVersion }}/Editor/Unity.exe"

          if (-Not (Test-Path $UNITY_PATH)) {
            Write-Host "::error::Unity executable not found at $UNITY_PATH"
            exit 1
          }

          echo "unity_path=$UNITY_PATH" >> $env:GITHUB_OUTPUT
          Write-Host "Found Unity at: $UNITY_PATH"

      - name: Create test directories
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/TestResults"
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/CodeCoverage"

      - name: Run EditMode tests
        id: editmode-tests
        shell: powershell
        run: |
          Write-Host "Running EditMode tests..."
          $exitCode = 0

          try {
            & "${{ steps.unity-path.outputs.unity_path }}" `
              -runTests `
              -batchmode `
              -nographics `
              -projectPath "${{ github.workspace }}" `
              -testPlatform EditMode `
              -testResults "${{ github.workspace }}/TestResults/EditMode-results.xml" `
              -logFile "${{ github.workspace }}/TestResults/EditMode-log.txt" `
              -enableCodeCoverage `
              -coverageResultsPath "${{ github.workspace }}/CodeCoverage" `
              -coverageOptions "generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+IrsikSoftware.LogSmith"

            $exitCode = $LASTEXITCODE
          } catch {
            Write-Host "##[error]Unity test runner crashed: $_"
            exit 1
          }

          Write-Host "Unity exit code: $exitCode"
          Write-Host "Checking test results directory..."
          Get-ChildItem "${{ github.workspace }}/TestResults" -ErrorAction SilentlyContinue | Format-Table Name, Length

          # Check if XML results were actually created
          if (-Not (Test-Path "${{ github.workspace }}/TestResults/EditMode-results.xml")) {
            Write-Host "##[error]EditMode-results.xml was not created! Unity may have crashed."
            Get-Content "${{ github.workspace }}/TestResults/EditMode-log.txt" -Tail 20
            exit 1
          }

          Write-Host "EditMode tests completed successfully"
          echo "results_path=${{ github.workspace }}/TestResults" >> $env:GITHUB_OUTPUT
          echo "coverage_path=${{ github.workspace }}/CodeCoverage" >> $env:GITHUB_OUTPUT

      - name: Run PlayMode tests
        id: playmode-tests
        shell: powershell
        run: |
          Write-Host "Running PlayMode tests..."
          $exitCode = 0

          try {
            & "${{ steps.unity-path.outputs.unity_path }}" `
              -runTests `
              -batchmode `
              -nographics `
              -projectPath "${{ github.workspace }}" `
              -testPlatform PlayMode `
              -testResults "${{ github.workspace }}/TestResults/PlayMode-results.xml" `
              -logFile "${{ github.workspace }}/TestResults/PlayMode-log.txt"

            $exitCode = $LASTEXITCODE
          } catch {
            Write-Host "##[error]Unity test runner crashed: $_"
            exit 1
          }

          Write-Host "Unity exit code: $exitCode"
          Write-Host "Checking test results directory..."
          Get-ChildItem "${{ github.workspace }}/TestResults" -ErrorAction SilentlyContinue | Format-Table Name, Length

          # Check if XML results were actually created
          if (-Not (Test-Path "${{ github.workspace }}/TestResults/PlayMode-results.xml")) {
            Write-Host "##[error]PlayMode-results.xml was not created! Unity may have crashed."
            Get-Content "${{ github.workspace }}/TestResults/PlayMode-log.txt" -Tail 20
            exit 1
          }

          Write-Host "PlayMode tests completed successfully"
          echo "results_path=${{ github.workspace }}/TestResults" >> $env:GITHUB_OUTPUT

      - name: Generate test summary
        if: always()
        shell: powershell
        run: |
          Write-Host "Generating test result summary..."

          $summary = @"
          ## Test Results - ${{ matrix.unityVersion }}

          ### EditMode Tests
          "@

          if (Test-Path "${{ github.workspace }}/TestResults/EditMode-results.xml") {
            [xml]$editResults = Get-Content "${{ github.workspace }}/TestResults/EditMode-results.xml"
            $testSuite = $editResults.'test-run'
            $summary += @"
          - **Total:** $($testSuite.total)
          - **Passed:** $($testSuite.passed)
          - **Failed:** $($testSuite.failed)
          - **Skipped:** $($testSuite.skipped)
          - **Duration:** $($testSuite.duration)s

          "@
          } else {
            $summary += "XML results not found`n`n"
          }

          $summary += @"
          ### PlayMode Tests
          "@

          if (Test-Path "${{ github.workspace }}/TestResults/PlayMode-results.xml") {
            [xml]$playResults = Get-Content "${{ github.workspace }}/TestResults/PlayMode-results.xml"
            $testSuite = $playResults.'test-run'
            $summary += @"
          - **Total:** $($testSuite.total)
          - **Passed:** $($testSuite.passed)
          - **Failed:** $($testSuite.failed)
          - **Skipped:** $($testSuite.skipped)
          - **Duration:** $($testSuite.duration)s

          "@
          } else {
            $summary += "XML results not found`n`n"
          }

          $summary | Out-File -FilePath "${{ github.workspace }}/TestResults/test-summary-${{ matrix.unityVersion }}.md" -Encoding UTF8
          Write-Host $summary

      - name: Upload EditMode test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results-EditMode-${{ matrix.unityVersion }}-Windows
          path: ${{ github.workspace }}/TestResults/EditMode-*
          retention-days: 30
          if-no-files-found: warn

      - name: Upload PlayMode test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results-PlayMode-${{ matrix.unityVersion }}-Windows
          path: ${{ github.workspace }}/TestResults/PlayMode-*
          retention-days: 30
          if-no-files-found: warn

      - name: Upload test summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Summary-${{ matrix.unityVersion }}-Windows
          path: ${{ github.workspace }}/TestResults/test-summary-*.md
          retention-days: 30
          if-no-files-found: warn

      - name: Upload coverage results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Coverage-Results-${{ matrix.unityVersion }}-Windows
          path: ${{ github.workspace }}/CodeCoverage
          retention-days: 30
          if-no-files-found: warn

      - name: Clean up test artifacts
        if: always()
        shell: powershell
        run: |
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "${{ github.workspace }}/TestResults"
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "${{ github.workspace }}/CodeCoverage"

  coverage-summary:
    name: Coverage Gate
    runs-on: [self-hosted, Windows]
    needs: test
    if: always()

    steps:
      - name: Check if Windows tests passed
        run: |
          echo "::notice::Windows tests are the primary gate. Linux/macOS tests are optional until runners are configured."
