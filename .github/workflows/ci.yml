name: CI Matrix - Unity Tests

on:
  push:
    branches: [ main, feature/gh-3-ci-matrix-unity-versions ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test ${{ matrix.unityVersion }} on Windows
    runs-on: [self-hosted, Windows]

    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2022.3.50f1  # 2022.3 LTS
          - 2023.2.20f1  # 2023 LTS
          - 6000.0.26f1  # 6000.2 LTS (Unity 6)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Unity License
        shell: powershell
        run: |
          $LICENSE_DIR = "$env:LOCALAPPDATA\Unity\licenses"
          New-Item -ItemType Directory -Force -Path $LICENSE_DIR | Out-Null

          $LICENSE_FILE = "$LICENSE_DIR\UnityEntitlementLicense.xml"
          [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String("${{ secrets.UNITY_LICENSE }}")) | Out-File -FilePath $LICENSE_FILE -Encoding UTF8 -NoNewline

          Write-Host "Unity license installed at: $LICENSE_FILE"

      - name: Cache Unity Library
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ matrix.unityVersion }}-${{ hashFiles('Packages/packages-lock.json', 'Packages/manifest.json', 'ProjectSettings/ProjectVersion.txt') }}
          restore-keys: |
            Library-${{ matrix.unityVersion }}-
            Library-

      - name: Find Unity Editor Path
        id: unity-path
        shell: powershell
        run: |
          $UNITY_PATH = "C:/Program Files/Unity/Hub/Editor/${{ matrix.unityVersion }}/Editor/Unity.exe"

          if (-Not (Test-Path $UNITY_PATH)) {
            Write-Host "::error::Unity executable not found at $UNITY_PATH"
            exit 1
          }

          echo "unity_path=$UNITY_PATH" >> $env:GITHUB_OUTPUT
          Write-Host "Found Unity at: $UNITY_PATH"

      - name: Create test directories
        shell: powershell
        run: |
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/TestResults"
          New-Item -ItemType Directory -Force -Path "${{ github.workspace }}/CodeCoverage"

      - name: Run EditMode tests
        id: editmode-tests
        shell: powershell
        run: |
          Write-Host "Running EditMode tests..."
          $exitCode = 0

          try {
            $unityArgs = @(
              "-runTests",
              "-batchmode",
              "-nographics",
              "-projectPath", "${{ github.workspace }}",
              "-testPlatform", "EditMode",
              "-testResults", "${{ github.workspace }}/TestResults/EditMode-results.xml",
              "-logFile", "${{ github.workspace }}/TestResults/EditMode-log.txt",
              "-enableCodeCoverage",
              "-coverageResultsPath", "${{ github.workspace }}/CodeCoverage",
              "-coverageOptions", "generateAdditionalMetrics;generateHtmlReport;generateBadgeReport;assemblyFilters:+IrsikSoftware.LogSmith"
            )

            $process = Start-Process -FilePath "${{ steps.unity-path.outputs.unity_path }}" `
              -ArgumentList $unityArgs `
              -Wait `
              -PassThru `
              -NoNewWindow

            $exitCode = $process.ExitCode
          } catch {
            Write-Host "##[error]Unity test runner crashed: $_"
            exit 1
          }

          Write-Host "Unity exit code: $exitCode"
          Write-Host "Checking test results directory..."
          Get-ChildItem "${{ github.workspace }}/TestResults" -ErrorAction SilentlyContinue | Format-Table Name, Length

          # Check if XML results were actually created
          if (-Not (Test-Path "${{ github.workspace }}/TestResults/EditMode-results.xml")) {
            Write-Host "##[error]EditMode-results.xml was not created! Unity may have crashed."
            Get-Content "${{ github.workspace }}/TestResults/EditMode-log.txt" -Tail 20
            exit 1
          }

          Write-Host "EditMode tests completed successfully"
          echo "results_path=${{ github.workspace }}/TestResults" >> $env:GITHUB_OUTPUT
          echo "coverage_path=${{ github.workspace }}/CodeCoverage" >> $env:GITHUB_OUTPUT

      - name: Run PlayMode tests
        id: playmode-tests
        shell: powershell
        run: |
          Write-Host "Running PlayMode tests..."
          $exitCode = 0

          try {
            $unityArgs = @(
              "-runTests",
              "-batchmode",
              "-nographics",
              "-projectPath", "${{ github.workspace }}",
              "-testPlatform", "PlayMode",
              "-testResults", "${{ github.workspace }}/TestResults/PlayMode-results.xml",
              "-logFile", "${{ github.workspace }}/TestResults/PlayMode-log.txt"
            )

            $process = Start-Process -FilePath "${{ steps.unity-path.outputs.unity_path }}" `
              -ArgumentList $unityArgs `
              -Wait `
              -PassThru `
              -NoNewWindow

            $exitCode = $process.ExitCode
          } catch {
            Write-Host "##[error]Unity test runner crashed: $_"
            exit 1
          }

          Write-Host "Unity exit code: $exitCode"
          Write-Host "Checking test results directory..."
          Get-ChildItem "${{ github.workspace }}/TestResults" -ErrorAction SilentlyContinue | Format-Table Name, Length

          # Check if XML results were actually created
          if (-Not (Test-Path "${{ github.workspace }}/TestResults/PlayMode-results.xml")) {
            Write-Host "##[error]PlayMode-results.xml was not created! Unity may have crashed."
            Get-Content "${{ github.workspace }}/TestResults/PlayMode-log.txt" -Tail 20
            exit 1
          }

          Write-Host "PlayMode tests completed successfully"
          echo "results_path=${{ github.workspace }}/TestResults" >> $env:GITHUB_OUTPUT

      - name: Generate test summary
        if: always()
        shell: powershell
        run: |
          Write-Host "Generating test result summary..."

          $summary = @"
          ## Test Results - ${{ matrix.unityVersion }}

          ### EditMode Tests
          "@

          if (Test-Path "${{ github.workspace }}/TestResults/EditMode-results.xml") {
            [xml]$editResults = Get-Content "${{ github.workspace }}/TestResults/EditMode-results.xml"
            $testSuite = $editResults.'test-run'
            $summary += @"
          - **Total:** $($testSuite.total)
          - **Passed:** $($testSuite.passed)
          - **Failed:** $($testSuite.failed)
          - **Skipped:** $($testSuite.skipped)
          - **Duration:** $($testSuite.duration)s

          "@
          } else {
            $summary += "XML results not found`n`n"
          }

          $summary += @"
          ### PlayMode Tests
          "@

          if (Test-Path "${{ github.workspace }}/TestResults/PlayMode-results.xml") {
            [xml]$playResults = Get-Content "${{ github.workspace }}/TestResults/PlayMode-results.xml"
            $testSuite = $playResults.'test-run'
            $summary += @"
          - **Total:** $($testSuite.total)
          - **Passed:** $($testSuite.passed)
          - **Failed:** $($testSuite.failed)
          - **Skipped:** $($testSuite.skipped)
          - **Duration:** $($testSuite.duration)s

          "@
          } else {
            $summary += "XML results not found`n`n"
          }

          $summary | Out-File -FilePath "${{ github.workspace }}/TestResults/test-summary-${{ matrix.unityVersion }}.md" -Encoding UTF8
          Write-Host $summary

      - name: Generate HTML test report
        if: always()
        shell: powershell
        run: |
          Write-Host "Generating HTML test report..."

          $shortSha = "${{ github.sha }}".Substring(0, 7)
          $unityVersion = "${{ matrix.unityVersion }}"
          $runUrl = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          $runNumber = "${{ github.run_number }}"
          $branch = "${{ github.ref_name }}"

          $html = '<!DOCTYPE html>' + "`n"
          $html += '<html>' + "`n"
          $html += '<head>' + "`n"
          $html += '  <meta charset="UTF-8">' + "`n"
          $html += "  <title>LogSmith Test Results - $unityVersion</title>" + "`n"
          $html += '  <style>' + "`n"
          $html += '    body { font-family: -apple-system, BlinkMacSystemFont, ''Segoe UI'', Arial, sans-serif; margin: 20px; background: #f5f5f5; }' + "`n"
          $html += '    .container { max-width: 1200px; margin: 0 auto; background: white; padding: 30px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }' + "`n"
          $html += '    h1 { color: #333; border-bottom: 3px solid #4CAF50; padding-bottom: 10px; }' + "`n"
          $html += '    .tabs { display: flex; gap: 10px; margin: 20px 0; border-bottom: 2px solid #ddd; }' + "`n"
          $html += '    .tab { padding: 10px 20px; cursor: pointer; background: #f0f0f0; border: none; border-radius: 4px 4px 0 0; font-size: 16px; }' + "`n"
          $html += '    .tab.active { background: #4CAF50; color: white; }' + "`n"
          $html += '    .tab-content { display: none; padding: 20px 0; }' + "`n"
          $html += '    .tab-content.active { display: block; }' + "`n"
          $html += '    .summary { display: grid; grid-template-columns: repeat(auto-fit, minmax(150px, 1fr)); gap: 15px; margin: 20px 0; }' + "`n"
          $html += '    .stat-card { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; text-align: center; }' + "`n"
          $html += '    .stat-card.passed { background: linear-gradient(135deg, #4CAF50 0%, #45a049 100%); }' + "`n"
          $html += '    .stat-card.failed { background: linear-gradient(135deg, #f44336 0%, #da190b 100%); }' + "`n"
          $html += '    .stat-card.skipped { background: linear-gradient(135deg, #ff9800 0%, #fb8c00 100%); }' + "`n"
          $html += '    .stat-card h3 { margin: 0; font-size: 14px; opacity: 0.9; }' + "`n"
          $html += '    .stat-card .value { font-size: 32px; font-weight: bold; margin: 10px 0; }' + "`n"
          $html += '    table { width: 100%; border-collapse: collapse; margin: 20px 0; }' + "`n"
          $html += '    th { background: #f0f0f0; padding: 12px; text-align: left; font-weight: 600; border-bottom: 2px solid #ddd; }' + "`n"
          $html += '    td { padding: 10px 12px; border-bottom: 1px solid #eee; }' + "`n"
          $html += '    tr:hover { background: #f9f9f9; }' + "`n"
          $html += '    .pass { color: #4CAF50; font-weight: bold; }' + "`n"
          $html += '    .fail { color: #f44336; font-weight: bold; }' + "`n"
          $html += '    .skip { color: #ff9800; font-weight: bold; }' + "`n"
          $html += '    .duration { color: #666; font-size: 0.9em; }' + "`n"
          $html += '  </style>' + "`n"
          $html += '  <script>' + "`n"
          $html += '    function showTab(tabName) {' + "`n"
          $html += '      document.querySelectorAll(''.tab-content'').forEach(el => el.classList.remove(''active''));' + "`n"
          $html += '      document.querySelectorAll(''.tab'').forEach(el => el.classList.remove(''active''));' + "`n"
          $html += '      document.getElementById(tabName).classList.add(''active'');' + "`n"
          $html += '      event.target.classList.add(''active'');' + "`n"
          $html += '    }' + "`n"
          $html += '  </script>' + "`n"
          $html += '</head>' + "`n"
          $html += '<body>' + "`n"
          $html += '  <div class="container">' + "`n"
          $html += "    <h1>LogSmith Test Results - Unity $unityVersion</h1>" + "`n"
          $html += "    <p><strong>Run:</strong> <a href='$runUrl'>#$runNumber</a> | <strong>Commit:</strong> $shortSha | <strong>Branch:</strong> $branch</p>" + "`n"

          # EditMode Tests
          if (Test-Path "${{ github.workspace }}/TestResults/EditMode-results.xml") {
            [xml]$editXml = Get-Content "${{ github.workspace }}/TestResults/EditMode-results.xml"
            $editSuite = $editXml.'test-run'

            $html += '    <div class="tabs">' + "`n"
            $html += '      <button class="tab active" onclick="showTab(''editmode'')">EditMode Tests</button>' + "`n"
            $html += '      <button class="tab" onclick="showTab(''playmode'')">PlayMode Tests</button>' + "`n"
            $html += '    </div>' + "`n"
            $html += '    <div id="editmode" class="tab-content active">' + "`n"
            $html += '      <div class="summary">' + "`n"
            $html += "        <div class='stat-card'><h3>Total Tests</h3><div class='value'>$($editSuite.total)</div></div>" + "`n"
            $html += "        <div class='stat-card passed'><h3>Passed</h3><div class='value'>$($editSuite.passed)</div></div>" + "`n"
            $html += "        <div class='stat-card failed'><h3>Failed</h3><div class='value'>$($editSuite.failed)</div></div>" + "`n"
            $html += "        <div class='stat-card skipped'><h3>Skipped</h3><div class='value'>$($editSuite.skipped)</div></div>" + "`n"
            $html += "        <div class='stat-card'><h3>Duration</h3><div class='value'>$([math]::Round([double]$editSuite.duration, 2))s</div></div>" + "`n"
            $html += '      </div>' + "`n"
            $html += '      <table>' + "`n"
            $html += '        <thead><tr><th>Test Case</th><th>Result</th><th>Duration</th></tr></thead>' + "`n"
            $html += '        <tbody>' + "`n"

            foreach ($testCase in $editXml.SelectNodes("//test-case")) {
              $result = $testCase.result
              $resultClass = if ($result -eq "Passed") { "pass" } elseif ($result -eq "Failed") { "fail" } else { "skip" }
              $duration = [math]::Round([double]$testCase.duration, 3)
              $html += "          <tr><td>$($testCase.fullname)</td><td class='$resultClass'>$result</td><td class='duration'>${duration}s</td></tr>" + "`n"
            }

            $html += '        </tbody>' + "`n"
            $html += '      </table>' + "`n"
            $html += '    </div>' + "`n"
          }

          # PlayMode Tests
          if (Test-Path "${{ github.workspace }}/TestResults/PlayMode-results.xml") {
            [xml]$playXml = Get-Content "${{ github.workspace }}/TestResults/PlayMode-results.xml"
            $playSuite = $playXml.'test-run'

            $html += '    <div id="playmode" class="tab-content">' + "`n"
            $html += '      <div class="summary">' + "`n"
            $html += "        <div class='stat-card'><h3>Total Tests</h3><div class='value'>$($playSuite.total)</div></div>" + "`n"
            $html += "        <div class='stat-card passed'><h3>Passed</h3><div class='value'>$($playSuite.passed)</div></div>" + "`n"
            $html += "        <div class='stat-card failed'><h3>Failed</h3><div class='value'>$($playSuite.failed)</div></div>" + "`n"
            $html += "        <div class='stat-card skipped'><h3>Skipped</h3><div class='value'>$($playSuite.skipped)</div></div>" + "`n"
            $html += "        <div class='stat-card'><h3>Duration</h3><div class='value'>$([math]::Round([double]$playSuite.duration, 2))s</div></div>" + "`n"
            $html += '      </div>' + "`n"
            $html += '      <table>' + "`n"
            $html += '        <thead><tr><th>Test Case</th><th>Result</th><th>Duration</th></tr></thead>' + "`n"
            $html += '        <tbody>' + "`n"

            foreach ($testCase in $playXml.SelectNodes("//test-case")) {
              $result = $testCase.result
              $resultClass = if ($result -eq "Passed") { "pass" } elseif ($result -eq "Failed") { "fail" } else { "skip" }
              $duration = [math]::Round([double]$testCase.duration, 3)
              $html += "          <tr><td>$($testCase.fullname)</td><td class='$resultClass'>$result</td><td class='duration'>${duration}s</td></tr>" + "`n"
            }

            $html += '        </tbody>' + "`n"
            $html += '      </table>' + "`n"
            $html += '    </div>' + "`n"
          }

          $html += '  </div>' + "`n"
          $html += '</body>' + "`n"
          $html += '</html>' + "`n"

          $html | Out-File -FilePath "${{ github.workspace }}/TestResults/test-report-${{ matrix.unityVersion }}.html" -Encoding UTF8
          Write-Host "HTML report generated"

      - name: Send Discord notification
        if: always()
        shell: powershell
        run: |
          if (-not "${{ secrets.TESTRESULTS_WEBHOOK }}") {
            Write-Host "TESTRESULTS_WEBHOOK not configured, skipping Discord notification"
            exit 0
          }

          $editTotal = 0
          $editPassed = 0
          $editFailed = 0
          $playTotal = 0
          $playPassed = 0
          $playFailed = 0

          if (Test-Path "${{ github.workspace }}/TestResults/EditMode-results.xml") {
            [xml]$editXml = Get-Content "${{ github.workspace }}/TestResults/EditMode-results.xml"
            $editSuite = $editXml.'test-run'
            $editTotal = [int]$editSuite.total
            $editPassed = [int]$editSuite.passed
            $editFailed = [int]$editSuite.failed
          }

          if (Test-Path "${{ github.workspace }}/TestResults/PlayMode-results.xml") {
            [xml]$playXml = Get-Content "${{ github.workspace }}/TestResults/PlayMode-results.xml"
            $playSuite = $playXml.'test-run'
            $playTotal = [int]$playSuite.total
            $playPassed = [int]$playSuite.passed
            $playFailed = [int]$playSuite.failed
          }

          $totalTests = $editTotal + $playTotal
          $totalPassed = $editPassed + $playPassed
          $totalFailed = $editFailed + $playFailed

          $status = if ($totalFailed -eq 0) { "success" } else { "failure" }
          $color = if ($totalFailed -eq 0) { 3066993 } else { 15158332 }
          $emoji = if ($totalFailed -eq 0) { ":white_check_mark:" } else { ":x:" }

          $reportUrl = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}#artifacts"
          $runUrl = "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          $nl = [Environment]::NewLine
          $description = "**Total:** $totalTests | **Passed:** $totalPassed | **Failed:** $totalFailed$nl$nl[📊 View Full HTML Report]($reportUrl)"

          $payload = @{
            embeds = @(
              @{
                title = "$emoji LogSmith Tests - Unity ${{ matrix.unityVersion }}"
                description = $description
                color = $color
                fields = @(
                  @{ name = "EditMode"; value = "$editPassed/$editTotal passed"; inline = $true }
                  @{ name = "PlayMode"; value = "$playPassed/$playTotal passed"; inline = $true }
                  @{ name = "Run"; value = "[#${{ github.run_number }}]($runUrl)"; inline = $true }
                )
                timestamp = (Get-Date).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ss.fffZ")
              }
            )
          } | ConvertTo-Json -Depth 10

          try {
            Invoke-RestMethod -Uri "${{ secrets.TESTRESULTS_WEBHOOK }}" -Method Post -Body $payload -ContentType "application/json"
            Write-Host "Discord notification sent successfully"
          } catch {
            Write-Host "::warning::Failed to send Discord notification: $_"
          }

      - name: Upload HTML test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Report-HTML-${{ matrix.unityVersion }}-Windows
          path: ${{ github.workspace }}/TestResults/test-report-*.html
          retention-days: 30
          if-no-files-found: warn

      - name: Upload EditMode test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results-EditMode-${{ matrix.unityVersion }}-Windows
          path: ${{ github.workspace }}/TestResults/EditMode-*
          retention-days: 30
          if-no-files-found: warn

      - name: Upload PlayMode test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Results-PlayMode-${{ matrix.unityVersion }}-Windows
          path: ${{ github.workspace }}/TestResults/PlayMode-*
          retention-days: 30
          if-no-files-found: warn

      - name: Upload test summary
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Test-Summary-${{ matrix.unityVersion }}-Windows
          path: ${{ github.workspace }}/TestResults/test-summary-*.md
          retention-days: 30
          if-no-files-found: warn

      - name: Upload coverage results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: Coverage-Results-${{ matrix.unityVersion }}-Windows
          path: ${{ github.workspace }}/CodeCoverage
          retention-days: 30
          if-no-files-found: warn

      - name: Clean up test artifacts
        if: always()
        shell: powershell
        run: |
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "${{ github.workspace }}/TestResults"
          Remove-Item -Recurse -Force -ErrorAction SilentlyContinue "${{ github.workspace }}/CodeCoverage"

  coverage-summary:
    name: Coverage Gate
    runs-on: [self-hosted, Windows]
    needs: test
    if: always()

    steps:
      - name: Check if Windows tests passed
        run: |
          echo "::notice::Windows tests are the primary gate. Linux/macOS tests are optional until runners are configured."
